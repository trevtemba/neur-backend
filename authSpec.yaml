# Auth Services
#
#
# Description: API for managing user account sign-up, login, logout, password reset, and refresh tokens
#

# ---------General API Information---------
openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "Auth Services API"
  description: Account Services API

# ---------API Server Information---------
servers:
  - url: https://www.cusports.com/api

# ---------API Paths Information---------
paths:
  # Users can be customers, business users, customer service reps, admin, or other employees; personal information is also stored
  /auth/signup:

    # Creates a user account with user entered properties; assigns user with an id
    post:
      description: Allows you to add a new account or accounts to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/account"

      # Responses to creating a particular users
      responses:
        "200":
          description: Successfully added a new user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"

  /auth/login:

    # Creates a user account with user entered properties; assigns user with an id
    post:
      description: Allows you to add a new account or accounts to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/account"

      # Responses to creating a particular users
      responses:
        "200":
          description: Successfully added a new user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"

  /auth/logout:

    # Creates a user account with user entered properties; assigns user with an id
    post:
      description: Allows you to add a new account or accounts to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/account"

      # Responses to creating a particular users
      responses:
        "200":
          description: Successfully added a new user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"

  /auth/password-reset:

    # Creates a user account with user entered properties; assigns user with an id
    post:
      description: Allows you to add a new account or accounts to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/account"

      # Responses to creating a particular users
      responses:
        "200":
          description: Successfully added a new user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"

  /auth/refresh-token:

    # Creates a user account with user entered properties; assigns user with an id
    post:
      description: Allows you to add a new account or accounts to the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/account"

      # Responses to creating a particular users
      responses:
        "200":
          description: Successfully added a new user account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/account"
        "400":
          $ref: "#/components/responses/400Error"
        "500":
          $ref: "#/components/responses/500Error"

# ---------API Components Information---------
# Contains all reusable parameters, responses, and schemas for the Accounts API
components:
  # ---------Parameters---------
  parameters:
    # Helps select user based on their account type
    UserType:
      name: user_type
      in: query
      description: User's account type (CSR, admin, etc.)
      schema:
        type: string

    # Helps differentiate user based on their registration status (whether they are registered or not).
    LoginType:
      name: login_type
      in: query
      description: User's login type (Registered or Guest)
      schema:
        type: string

    # Helps set the limit of user accounts on a single page
    PageLimit:
      name: limit
      in: query
      description: Limits the number of items on a page
      schema:
        type: integer

    # Helps to select which page of user accounts to be displayed
    PageOffset:
      name: offset
      in: query
      description: Specifies the page number of the user accounts to be displayed
      schema:
        type: integer

    UserStatus:
      name: status
      in: query
      description: Allows filtering of users by activity.
      schema:
        type: string

  # ---------API Responses Information---------
  responses:
    # A schema for general 400 error code information
    400Error:
      description: Invalid Client Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                description: A human readable error message
                type: string

    # A schema for general 500 error code information
    500Error:
      description: Unexpected Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                description: A human readable error message
                type: string

  # ---------API Schemas Information---------
  schemas:
    # Login Credential schema to be re-used throughout the API
    loginCredentials:
      description: The requirements to login
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    # User Preferences schema to be re-used throughout the API
    userPreferences:
      description: represents the preferences that a user may have
      type: object
      required:
        - language
      properties:
        language:
          type: string
        # Email or SMS notification preference.
        notif_pref:
          type: string
        # User's Preferred delivery address
        delivery_pref:
          type: string
        # User's Preferred payment
        payment_method_pref:
          type: object
          properties:
            holder_name:
              type: string
            billing_address:
              type: string
            card_number:
              type: integer
            card_exp:
              type: integer

    # User account schema to be re-used throughout the API
    account:
      description: A single user account for the CUSports application
      type: object
      required:
        - id
        - email
        - password

      properties:
        # Unique ID for a given user
        id:
          type: string
        email:
          type: string
        password:
          type: string
        # Type of user account (CSR, Warehouse employee, Customer, etc.)
        role:
          type: string
        # Whether user is active on site
        active:
          type: boolean
        # Timestamp for when user last made a request
        last_active:
          type: string
        # User preferences of the user
        preferences:
          $ref: "#/components/schemas/userPreferences"

  # ---------API SecuritySchemes Information NOT NEEDED FOR 3720---------
  #securitySchemes:
  #  ApiKey:
  #    type: apiKey
  #    in: header
  #    name: X-Api-Key
# ---------API Security Information  NOT NEEDED FOR 3720---------
#security:
#  - ApiKey: []
